* c-in-clj

Generate dynamically load pure C code from Clojure s-expressions.
Work in progress, not ready to use.

* Syntax

** Create c function:

#+begin_src clojure
(cdefn function_name return_type [arg1_type /arg1/]
  function_body...)
#+end_src

ex:

#+BEGIN_SRC clojure
(cdefn test1 void [int32_t x int32_t y]
 (return (+ x y)))
#+END_SRC

** Instrinsic types:
*** Fixed width interger types from <stdint.h> with the corresponding aliases:
| Type     | Alias(es) |
|----------+-----------|
| int8_t   | i8        |
| uint8_t  | u8, byte  |
| int16_t  | i16       |
| uint16_t | u16       |
| int32_t  | i32       |
| uint32_t | u32       |
| int64_t  | i64       |
| uint64_t | u64       |

*** *float* (32-bit) and *double* (64-bit) floating point types
*** void
*** char
** Pointer Types
Any type can be made into a pointer type by adding * to the end of it.
Multiple *'s can be added to the end of a type name as needed.

** Structures
C structure's can be defined as below:

#+begin_src clojure
(cstruct struct_name
 (member1_type member1)
 ...)
#+end_src

** Literal symbol names
Any clojure keyword will be interpreted as a symbol literal. The
disadvantage to this is that any literal symbols (keywords) will not
be processed with any of the type and symbol information that c-in-clj
has available (used to invoke functions from the repl, dynamically
redefine symbols, and for certain macros).

ex:
src_<clojure>{:void*} and src_<clojure>{void*} are equivalent except that c-in-clj can use the
information in void* to know that this is a pointer type whereas
c-in-clj will treat :void* as if it is just void (without any type
information).

This can be useful for referencing compiler intrinsic types and
symbols or symbols in referenced libraries without having to define
them explicitly in c-in-clj.

** Dynamic symbols redefinition
c-in-clj supports the dynamic redefinition of symbols.  Support for
this varies depending on the backend being used.  This can be useful
for redefining functions at the repl.  For instance we can do the
following:

#+BEGIN_SRC clojure
user=> (cdefn test1 void [int32_t x int32_t y] (return (+ x y)))
user=> (cdefn test2 void [] (test1 3 4))
user=> (test2)
7
user=> (cdefn test1 void [int32_t x int32_t y] (return (* x y)))
user=> (test2)
12
#+END_SRC

The way function redefinition is handled is backend specific.  Please
consult the backend you are using for implementation specific details.
Please be aware that backends may or may not throw an error when you
try to redefine a function signature which will result in errors if
not done carefully.

** Keywords and Operators:

| c-in-clj expression   | c equivalent     |
|-----------------------+------------------|
| (+ x y)               | x + y            |
| (- x y)               | x - y            |
| (* x y)               | x * y            |
| (/ x y)               | x / y            |
| (mod x y)             | x % y            |
| (= x y)               | x == y           |
| (not= x y)            | x != y           |
| (< x y)               | x < y            |
| (> x y)               | x > y            |
| (<= x y)              | x <= y           |
| (>= x y)              | x >= y           |
| (or x y)              | (x \vert\vert y) |
| (and x y)             | (x && y)         |
| (bit-and x y)         | (x & y)          |
| (bit-or x y)          | (x \vert y)      |
| (bit-xor x y)         | (x ^ y)          |
| (bit-shift-left x y)  | (x << y)         |
| (bit-shift-right x y) | (x >> y)         |
| (set! x y)            | (x = y)          |
| (and= x y)            | (x &= y)         |
| (or= x y)             | (x \vert= y)     |
| (xor= x y)            | (x ^= y)         |
| (inc x)               | ++x              |
| (post-inc x)          | x++              |
| (dec x)               | --x              |
| (post-dec x)          | x--              |
| (not x)               | !x               |
| (bit-not x)           | ~x               |
| (. x y)               | x.y              |
| (-> x y)              | x->y             |
| (ref x)               | &x               |
| (deref x) or @x       | *x               |
| (aget x i)            | x[i]             |
| (aset x i z)          | x[i] = z         |
| (sizeof x)            | sizeof(x)        |
| (cast i32* x)         | (int32_t*)x      |
   
** c-in-clj statements
   
*** {} blocks

(do
 (a)
 (b)
 (c))

{
 a();
 b();
 c();
}
   
*** if, else

(if (> x y) (a))

if(x > y) a();

(if (> x y)) (a) (b))

if(x > y) a();
else b();

(if (> x y)
 (do
  (a)
  (b))
 (do
  (c)
  (d)))

if(x > y)
{
 a();
 b();
}
else
{
 c();
 d();
}

(cond
 (> x y) (a)
 (< x y) (b)
 (c))

if(x > y) a();
else if(x < y) b();
else c():

*** switch/case

(case x
 0 (return a)
 1 (b)
 (c))

switch(x)
{
 case 0:
  return a;
  break;
 case 1:
  b();
  break;
 default:
  c();
  break;
}

*** while

(while (> x y)
 (if (not (a x)) (break);
 (dec x))

while(x > y)
{
 if(!a(x)) break;
 --x;
}

*** for

(for (set! x 0) (< x len) (pos x)
 (if (a x) (continue))
 (b x))

for(x = 0, x < len, ++x)
{
 if(a(x)) continue;
 b(x);
}


(for [(set! i 0) (set! j 0)] (and (< i x) (< j y)) [(inc i) (inc j)]
 (a i j))

for(i = 0, j = 0; i < x && j < y; ++i ++j)
{
 a(i, j);
}

*** goto

(do
 (label a)
  (if (b) (goto a)))

{
 a:
  if(b) goto a;
}

*** let

(let [^int x 0
      ^double y 1.0]
 (a x y) (b y x))

{
 int x = 0;
 double y = 1.0;
 a(x, y);
 b(y, x);
}

*** To Do items
**** TODO array type names
**** TODO let statements
**** TODO cpp-mode only: \ (::)
     
